% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gdal_tiles.R
\name{gdal_tiles}
\alias{gdal_tiles}
\title{Create tiles, like gdal2tiles.py}
\usage{
gdal_tiles(
  dsn,
  zoom = NULL,
  blocksize = 256L,
  profile = "mercator",
  output_dir = tempfile(),
  overwrite = FALSE,
  update = FALSE,
  dry_run = TRUE,
  xyz = FALSE,
  format = c("png", "jpeg"),
  write_html = TRUE,
  minmaxzoom = NA,
  title = "",
  copyright = "copyright ..."
)
}
\arguments{
\item{dsn}{input dataset, file path, VRT string, or any DSN GDAL can open and warp from}

\item{zoom}{zooms to render, can be a single number multiple (from 0:23)}

\item{blocksize}{size of tiles, defaults to 256}

\item{profile}{domain to use, 'mercator', 'geodetic' (longlat), or 'raster'}

\item{output_dir}{directory to write to, by default a tempdir is used}

\item{overwrite}{clobber the output directory, \code{FALSE} is the default}

\item{update}{not implemented (please take care)}

\item{dry_run}{if \code{TRUE} only the scheme is built and returned as a data frame}

\item{xyz}{is the zero-row tile to be at the top, then set this \code{TRUE}}

\item{format}{'png' or 'jpeg'}

\item{write_html}{\code{TRUE} by default, writes HTML index see Details}

\item{minmaxzoom}{optional, two values to set the html index range independently of the rendered levels}

\item{title}{title for HTML output}

\item{copyright}{copyright statement for HTML output}
}
\value{
the tile scheme, invisibly as a dataframe
}
\description{
Create png or jpeg tiles from any GDAL DSN.
}
\details{
Currently we write a leaflet.html by default. Note that if you run with 'update' with a
different set of zooms in a previous run then the html will be overridden by a different
min and/or max zoom setting. The zoom range can be set independently of the generated or
existing tiles by using \code{minmaxzoom}.
}
\examples{
dsn <- system.file("extdata/gebco_ovr5.vrt", package = "filearchy", mustWork = TRUE)
## parallelize here
#future::plan(multicore)
tiles <- gdal_tiles(dsn, dry_run = TRUE)
if (!interactive()) unlink(tiles$path)
#future::plan(sequential)
}
